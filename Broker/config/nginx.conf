user nginx;

events {
    worker_connections 1024;
}

# TCP/Stream Proxy Configuration
stream {
    # Example of this log format:
    # 172.18.0.1 [09/Dec/2024:17:26:24 +0000] status: 200 80 1273 duration 0.189
    log_format mqtt_format '$remote_addr [$time_local] '
                     'status: $status $bytes_sent $bytes_received '
                     'duration $upstream_connect_time';

    access_log /var/log/nginx/proxy.log mqtt_format;

    # This is one way to setup load balancing with Nginx, 
    # I only have one broker to run so I commented this out
    # upstream mqtt_brokers {
    #     Add the mosquitto brokers you want to use with weights 
    #     server broker1 IP weight=5;
    #     server broker2 IP weight=3;
    #     server broker3 IP weight=2;

    #     Specify a timeout for detecting broker failures
    #     least_conn; # Load balancing method (least connections)
    # }

    limit_conn_zone $binary_remote_addr zone=mqtt_limit:10m;

    # MQTT over TLS Proxy
    server {
        listen 443 ssl;

        # Proxy to internal Mosquitto service, passing thae data to the broker still encrypted, becuase my professor is huge
        # about insider threats and loves when you try to mitigate them, which this would do
        proxy_pass mosquitto:8883;
        proxy_ssl on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;

        proxy_ssl_trusted_certificate /etc/nginx/ssl/ca.crt;
        proxy_ssl_certificate     /etc/nginx/ssl/broker.crt;
        proxy_ssl_certificate_key /etc/nginx/ssl/broker.key;

        ssl_certificate     /etc/nginx/ssl/broker.crt;
        ssl_certificate_key /etc/nginx/ssl/broker.key;
        ssl_trusted_certificate /etc/nginx/ssl/ca.crt;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_verify_client on;

        # Apply the connection limit for pseudo-rate limiting
        limit_conn mqtt_limit 10;
        
        proxy_buffer_size 4k; # same size as mosquitto
    }
}
